name: CI/CD Pipeline with Matrix Strategy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      deploy_infrastructure:
        description: 'Deploy infrastructure'
        required: false
        default: true
        type: boolean
      deploy_agents:
        description: 'Deploy agents'
        required: false
        default: true
        type: boolean

env:
  AZURE_RESOURCE_GROUP: ai-multiagent-lab-rg
  AZURE_LOCATION: eastus
  REGISTRY_NAME: acraimultiagentlab
  
jobs:
  # Job 1: Build and Test Matrix
  build-test-matrix:
    name: Build & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
        test-type: [unit, integration, security]
        include:
          - python-version: 3.11
            test-type: unit
            coverage: true
          - python-version: 3.11
            test-type: integration
            e2e: true
        exclude:
          - python-version: 3.9
            test-type: security
      fail-fast: false
      max-parallel: 6

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/tests/requirements.txt
        pip install pytest-cov pytest-xdist bandit safety

    - name: Run Unit Tests
      if: matrix.test-type == 'unit'
      run: |
        cd src
        python -m pytest tests/ -v --tb=short
        
    - name: Run Unit Tests with Coverage
      if: matrix.test-type == 'unit' && matrix.coverage
      run: |
        cd src
        python -m pytest tests/ -v --cov=agents --cov-report=xml --cov-report=html
        
    - name: Run Integration Tests
      if: matrix.test-type == 'integration'
      run: |
        cd src
        python -m pytest tests/ -v -m integration --tb=short
        
    - name: Run E2E Tests
      if: matrix.test-type == 'integration' && matrix.e2e
      run: |
        cd src
        python -m pytest tests/ -v -m e2e --tb=short
        
    - name: Run Security Tests
      if: matrix.test-type == 'security'
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
        
    - name: Upload Coverage Reports
      if: matrix.coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./src/coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}-${{ matrix.test-type }}
        path: |
          src/htmlcov/
          bandit-report.json
          safety-report.json

  # Job 2: Infrastructure Validation Matrix
  infrastructure-validation:
    name: Infrastructure Validation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tool: [bicep, terraform]
        environment: [development, staging, production]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Azure CLI
      uses: azure/CLI@v1
      with:
        azcliversion: 2.76.0

    - name: Setup Terraform
      if: matrix.tool == 'terraform'
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.13.1

    - name: Validate Bicep Templates
      if: matrix.tool == 'bicep'
      run: |
        echo "Validating Bicep templates for ${{ matrix.environment }}"
        az bicep build --file infrastructure/bicep/main.bicep
        az deployment sub validate \
          --location ${{ env.AZURE_LOCATION }} \
          --template-file infrastructure/bicep/main.bicep \
          --parameters location=${{ env.AZURE_LOCATION }} \
                      resourceGroupName=${{ env.AZURE_RESOURCE_GROUP }}-${{ matrix.environment }}

    - name: Validate Terraform Configuration
      if: matrix.tool == 'terraform'
      run: |
        cd infrastructure/terraform
        terraform init -backend=false
        terraform validate
        terraform plan -var="resource_group_name=${{ env.AZURE_RESOURCE_GROUP }}-${{ matrix.environment }}"

    - name: Upload Validation Results
      uses: actions/upload-artifact@v3
      with:
        name: validation-${{ matrix.tool }}-${{ matrix.environment }}
        path: |
          infrastructure/bicep/*.json
          infrastructure/terraform/.terraform/
          infrastructure/terraform/terraform.tfplan

  # Job 3: Security Scanning Matrix
  security-scanning:
    name: Security Scanning
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scan-type: [secrets, dependencies, code, infrastructure]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Secret Scanning
      if: matrix.scan-type == 'secrets'
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

    - name: Run Dependency Scanning
      if: matrix.scan-type == 'dependencies'
      run: |
        pip install safety
        safety check --json --output dependency-scan.json || true

    - name: Run Code Security Scanning
      if: matrix.scan-type == 'code'
      run: |
        pip install bandit
        bandit -r src/ -f json -o code-security-scan.json || true

    - name: Run Infrastructure Security Scanning
      if: matrix.scan-type == 'infrastructure'
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: './infrastructure'
        format: 'sarif'
        output: 'infrastructure-security-scan.sarif'

    - name: Upload Security Scan Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-${{ matrix.scan-type }}
        path: |
          dependency-scan.json
          code-security-scan.json
          infrastructure-security-scan.sarif

  # Job 4: Build Container Images Matrix
  build-containers:
    name: Build Container Images
    runs-on: ubuntu-latest
    needs: [build-test-matrix]
    strategy:
      matrix:
        component: [coordinator, analysis-agent, generation-agent, validation-agent]
        platform: [linux/amd64, linux/arm64]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./src/agents/${{ matrix.component }}
        platforms: ${{ matrix.platform }}
        push: true
        tags: |
          ${{ env.REGISTRY_NAME }}.azurecr.io/${{ matrix.component }}:latest
          ${{ env.REGISTRY_NAME }}.azurecr.io/${{ matrix.component }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 5: Deploy Infrastructure Matrix
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [infrastructure-validation, security-scanning]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        environment: [development, staging]
        tool: [bicep]
      fail-fast: false

    environment: ${{ matrix.environment }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy with Bicep
      if: matrix.tool == 'bicep'
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        scope: subscription
        region: ${{ env.AZURE_LOCATION }}
        template: ./infrastructure/bicep/main.bicep
        parameters: |
          location=${{ env.AZURE_LOCATION }}
          resourceGroupName=${{ env.AZURE_RESOURCE_GROUP }}-${{ matrix.environment }}
          tags={"environment":"${{ matrix.environment }}","project":"ai-multiagent-lab"}

    - name: Deploy with Terraform
      if: matrix.tool == 'terraform'
      run: |
        cd infrastructure/terraform
        terraform init
        terraform plan -var="resource_group_name=${{ env.AZURE_RESOURCE_GROUP }}-${{ matrix.environment }}"
        terraform apply -auto-approve

  # Job 6: Deploy Applications Matrix
  deploy-applications:
    name: Deploy Applications
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, build-containers]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        environment: [development, staging]
        component: [coordinator, analysis-agent, generation-agent, validation-agent]
      fail-fast: false

    environment: ${{ matrix.environment }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.AZURE_RESOURCE_GROUP }}-${{ matrix.environment }}
        cluster-name: aks-ai-multiagent-lab-${{ matrix.environment }}

    - name: Deploy to AKS
      run: |
        kubectl apply -f k8s/${{ matrix.component }}/
        kubectl set image deployment/${{ matrix.component }} \
          ${{ matrix.component }}=${{ env.REGISTRY_NAME }}.azurecr.io/${{ matrix.component }}:${{ github.sha }}
        kubectl rollout status deployment/${{ matrix.component }}

  # Job 7: Integration Tests Matrix
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-applications]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        environment: [development, staging]
        test-suite: [api, workflow, performance, security]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install test dependencies
      run: |
        pip install pytest requests azure-identity azure-mgmt-containerservice

    - name: Run API Integration Tests
      if: matrix.test-suite == 'api'
      run: |
        python -m pytest tests/integration/api/ -v \
          --environment=${{ matrix.environment }}

    - name: Run Workflow Integration Tests
      if: matrix.test-suite == 'workflow'
      run: |
        python -m pytest tests/integration/workflow/ -v \
          --environment=${{ matrix.environment }}

    - name: Run Performance Tests
      if: matrix.test-suite == 'performance'
      run: |
        python -m pytest tests/performance/ -v \
          --environment=${{ matrix.environment }}

    - name: Run Security Integration Tests
      if: matrix.test-suite == 'security'
      run: |
        python -m pytest tests/security/ -v \
          --environment=${{ matrix.environment }}

  # Job 8: Production Deployment (Manual Approval)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
    environment: 
      name: production
      url: https://ai-multiagent-lab-prod.azurewebsites.net

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy Infrastructure to Production
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        scope: subscription
        region: ${{ env.AZURE_LOCATION }}
        template: ./infrastructure/bicep/main.bicep
        parameters: |
          location=${{ env.AZURE_LOCATION }}
          resourceGroupName=${{ env.AZURE_RESOURCE_GROUP }}-production
          tags={"environment":"production","project":"ai-multiagent-lab"}

    - name: Deploy Applications to Production
      run: |
        az aks get-credentials --resource-group ${{ env.AZURE_RESOURCE_GROUP }}-production \
          --name aks-ai-multiagent-lab-production
        
        for component in coordinator analysis-agent generation-agent validation-agent; do
          kubectl apply -f k8s/$component/
          kubectl set image deployment/$component \
            $component=${{ env.REGISTRY_NAME }}.azurecr.io/$component:${{ github.sha }}
          kubectl rollout status deployment/$component
        done

  # Job 9: Notification and Reporting
  notify-results:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [build-test-matrix, infrastructure-validation, security-scanning, build-containers, deploy-infrastructure, deploy-applications, integration-tests]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate Report
      run: |
        echo "# CI/CD Pipeline Report" > pipeline-report.md
        echo "## Build Status" >> pipeline-report.md
        echo "- Build & Test: ${{ needs.build-test-matrix.result }}" >> pipeline-report.md
        echo "- Infrastructure Validation: ${{ needs.infrastructure-validation.result }}" >> pipeline-report.md
        echo "- Security Scanning: ${{ needs.security-scanning.result }}" >> pipeline-report.md
        echo "- Container Build: ${{ needs.build-containers.result }}" >> pipeline-report.md
        echo "- Infrastructure Deploy: ${{ needs.deploy-infrastructure.result }}" >> pipeline-report.md
        echo "- Application Deploy: ${{ needs.deploy-applications.result }}" >> pipeline-report.md
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> pipeline-report.md

    - name: Upload Pipeline Report
      uses: actions/upload-artifact@v3
      with:
        name: pipeline-report
        path: pipeline-report.md

