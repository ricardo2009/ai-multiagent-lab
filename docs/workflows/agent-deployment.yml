name: Agent Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      agents:
        description: 'Agents to deploy (comma-separated or "all")'
        required: true
        default: 'all'
        type: string
      deployment_strategy:
        description: 'Deployment strategy'
        required: true
        default: 'rolling'
        type: choice
        options:
        - rolling
        - blue-green
        - canary
      rollback_on_failure:
        description: 'Rollback on failure'
        required: false
        default: true
        type: boolean
  push:
    branches: [ main ]
    paths: 
    - 'src/agents/**'
    - 'k8s/**'
    - 'docker/**'

env:
  REGISTRY_NAME: acraimultiagentlab
  AZURE_RESOURCE_GROUP_PREFIX: ai-multiagent-lab-rg
  CLUSTER_NAME_PREFIX: aks-ai-multiagent-lab

jobs:
  # Job 1: Determine Deployment Matrix
  setup-deployment-matrix:
    name: Setup Deployment Matrix
    runs-on: ubuntu-latest
    outputs:
      agents: ${{ steps.setup-matrix.outputs.agents }}
      environment: ${{ steps.setup-matrix.outputs.environment }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup deployment matrix
      id: setup-matrix
      run: |
        if [ "${{ github.event.inputs.agents }}" == "all" ] || [ -z "${{ github.event.inputs.agents }}" ]; then
          AGENTS='["coordinator", "analysis-agent", "generation-agent", "validation-agent"]'
        else
          # Convert comma-separated string to JSON array
          AGENTS=$(echo "${{ github.event.inputs.agents }}" | sed 's/,/","/g' | sed 's/^/["/' | sed 's/$/"]/')
        fi
        
        ENVIRONMENT="${{ github.event.inputs.environment || 'development' }}"
        
        echo "agents=$AGENTS" >> $GITHUB_OUTPUT
        echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
        echo "Agents to deploy: $AGENTS"
        echo "Target environment: $ENVIRONMENT"

  # Job 2: Build and Test Agent Images
  build-agent-images:
    name: Build Agent Images
    runs-on: ubuntu-latest
    needs: setup-deployment-matrix
    strategy:
      matrix:
        agent: ${{ fromJson(needs.setup-deployment-matrix.outputs.agents) }}
        platform: [linux/amd64, linux/arm64]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Create Dockerfile for agent
      run: |
        mkdir -p docker/${{ matrix.agent }}
        cat > docker/${{ matrix.agent }}/Dockerfile << EOF
        FROM python:3.11-slim
        
        WORKDIR /app
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \\
            curl \\
            && rm -rf /var/lib/apt/lists/*
        
        # Copy requirements and install Python dependencies
        COPY src/requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        # Copy agent source code
        COPY src/agents/${{ matrix.agent }}/ ./
        COPY src/agents/shared/ ./shared/
        
        # Create non-root user
        RUN useradd -m -u 1000 agent && chown -R agent:agent /app
        USER agent
        
        # Health check
        HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\
          CMD curl -f http://localhost:8000/health || exit 1
        
        EXPOSE 8000
        
        CMD ["python", "main.py"]
        EOF

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/${{ matrix.agent }}/Dockerfile
        platforms: ${{ matrix.platform }}
        push: true
        tags: |
          ${{ env.REGISTRY_NAME }}.azurecr.io/${{ matrix.agent }}:latest
          ${{ env.REGISTRY_NAME }}.azurecr.io/${{ matrix.agent }}:${{ github.sha }}
          ${{ env.REGISTRY_NAME }}.azurecr.io/${{ matrix.agent }}:${{ needs.setup-deployment-matrix.outputs.environment }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run security scan on image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ matrix.agent }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.agent }}.sarif'

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-${{ matrix.agent }}
        path: trivy-results-${{ matrix.agent }}.sarif

  # Job 3: Generate Kubernetes Manifests
  generate-k8s-manifests:
    name: Generate K8s Manifests
    runs-on: ubuntu-latest
    needs: [setup-deployment-matrix, build-agent-images]
    strategy:
      matrix:
        agent: ${{ fromJson(needs.setup-deployment-matrix.outputs.agents) }}
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Kubernetes manifests
      run: |
        mkdir -p k8s/${{ matrix.agent }}
        
        # Deployment manifest
        cat > k8s/${{ matrix.agent }}/deployment.yaml << EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${{ matrix.agent }}
          namespace: ai-multiagent-lab
          labels:
            app: ${{ matrix.agent }}
            environment: ${{ needs.setup-deployment-matrix.outputs.environment }}
        spec:
          replicas: 2
          strategy:
            type: RollingUpdate
            rollingUpdate:
              maxSurge: 1
              maxUnavailable: 0
          selector:
            matchLabels:
              app: ${{ matrix.agent }}
          template:
            metadata:
              labels:
                app: ${{ matrix.agent }}
                environment: ${{ needs.setup-deployment-matrix.outputs.environment }}
            spec:
              containers:
              - name: ${{ matrix.agent }}
                image: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ matrix.agent }}:${{ github.sha }}
                ports:
                - containerPort: 8000
                env:
                - name: ENVIRONMENT
                  value: "${{ needs.setup-deployment-matrix.outputs.environment }}"
                - name: AGENT_NAME
                  value: "${{ matrix.agent }}"
                resources:
                  requests:
                    memory: "256Mi"
                    cpu: "250m"
                  limits:
                    memory: "512Mi"
                    cpu: "500m"
                livenessProbe:
                  httpGet:
                    path: /health
                    port: 8000
                  initialDelaySeconds: 30
                  periodSeconds: 10
                readinessProbe:
                  httpGet:
                    path: /ready
                    port: 8000
                  initialDelaySeconds: 5
                  periodSeconds: 5
              imagePullSecrets:
              - name: acr-secret
        EOF
        
        # Service manifest
        cat > k8s/${{ matrix.agent }}/service.yaml << EOF
        apiVersion: v1
        kind: Service
        metadata:
          name: ${{ matrix.agent }}-service
          namespace: ai-multiagent-lab
          labels:
            app: ${{ matrix.agent }}
        spec:
          selector:
            app: ${{ matrix.agent }}
          ports:
          - protocol: TCP
            port: 80
            targetPort: 8000
          type: ClusterIP
        EOF
        
        # HPA manifest
        cat > k8s/${{ matrix.agent }}/hpa.yaml << EOF
        apiVersion: autoscaling/v2
        kind: HorizontalPodAutoscaler
        metadata:
          name: ${{ matrix.agent }}-hpa
          namespace: ai-multiagent-lab
        spec:
          scaleTargetRef:
            apiVersion: apps/v1
            kind: Deployment
            name: ${{ matrix.agent }}
          minReplicas: 2
          maxReplicas: 10
          metrics:
          - type: Resource
            resource:
              name: cpu
              target:
                type: Utilization
                averageUtilization: 70
          - type: Resource
            resource:
              name: memory
              target:
                type: Utilization
                averageUtilization: 80
        EOF

    - name: Upload Kubernetes manifests
      uses: actions/upload-artifact@v3
      with:
        name: k8s-manifests-${{ matrix.agent }}
        path: k8s/${{ matrix.agent }}/

  # Job 4: Deploy to Development (Rolling)
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [setup-deployment-matrix, generate-k8s-manifests]
    if: needs.setup-deployment-matrix.outputs.environment == 'development'
    strategy:
      matrix:
        agent: ${{ fromJson(needs.setup-deployment-matrix.outputs.agents) }}
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Kubernetes manifests
      uses: actions/download-artifact@v3
      with:
        name: k8s-manifests-${{ matrix.agent }}
        path: k8s/${{ matrix.agent }}/

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.AZURE_RESOURCE_GROUP_PREFIX }}-development
        cluster-name: ${{ env.CLUSTER_NAME_PREFIX }}-development

    - name: Create namespace if not exists
      run: |
        kubectl create namespace ai-multiagent-lab --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy agent
      run: |
        echo "Deploying ${{ matrix.agent }} to development"
        kubectl apply -f k8s/${{ matrix.agent }}/
        kubectl rollout status deployment/${{ matrix.agent }} -n ai-multiagent-lab --timeout=300s

    - name: Verify deployment
      run: |
        kubectl get pods -n ai-multiagent-lab -l app=${{ matrix.agent }}
        kubectl get services -n ai-multiagent-lab -l app=${{ matrix.agent }}

  # Job 5: Deploy to Staging (Blue-Green)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [setup-deployment-matrix, generate-k8s-manifests]
    if: needs.setup-deployment-matrix.outputs.environment == 'staging'
    strategy:
      matrix:
        agent: ${{ fromJson(needs.setup-deployment-matrix.outputs.agents) }}
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Kubernetes manifests
      uses: actions/download-artifact@v3
      with:
        name: k8s-manifests-${{ matrix.agent }}
        path: k8s/${{ matrix.agent }}/

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.AZURE_RESOURCE_GROUP_PREFIX }}-staging
        cluster-name: ${{ env.CLUSTER_NAME_PREFIX }}-staging

    - name: Deploy Green version
      run: |
        echo "Deploying Green version of ${{ matrix.agent }}"
        
        # Modify manifests for green deployment
        sed 's/name: ${{ matrix.agent }}/name: ${{ matrix.agent }}-green/g' k8s/${{ matrix.agent }}/deployment.yaml > k8s/${{ matrix.agent }}/deployment-green.yaml
        sed 's/app: ${{ matrix.agent }}/app: ${{ matrix.agent }}-green/g' k8s/${{ matrix.agent }}/deployment-green.yaml -i
        
        kubectl apply -f k8s/${{ matrix.agent }}/deployment-green.yaml
        kubectl rollout status deployment/${{ matrix.agent }}-green -n ai-multiagent-lab --timeout=300s

    - name: Run health checks on Green
      run: |
        echo "Running health checks on Green deployment"
        kubectl wait --for=condition=ready pod -l app=${{ matrix.agent }}-green -n ai-multiagent-lab --timeout=300s

    - name: Switch traffic to Green
      run: |
        echo "Switching traffic to Green deployment"
        kubectl patch service ${{ matrix.agent }}-service -n ai-multiagent-lab -p '{"spec":{"selector":{"app":"${{ matrix.agent }}-green"}}}'

    - name: Remove Blue deployment
      run: |
        echo "Removing Blue deployment"
        kubectl delete deployment ${{ matrix.agent }} -n ai-multiagent-lab --ignore-not-found=true

    - name: Rename Green to main
      run: |
        echo "Renaming Green deployment to main"
        kubectl patch deployment ${{ matrix.agent }}-green -n ai-multiagent-lab -p '{"metadata":{"name":"${{ matrix.agent }}"}}'

  # Job 6: Deploy to Production (Canary)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [setup-deployment-matrix, generate-k8s-manifests]
    if: needs.setup-deployment-matrix.outputs.environment == 'production'
    environment: production
    strategy:
      matrix:
        agent: ${{ fromJson(needs.setup-deployment-matrix.outputs.agents) }}
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Kubernetes manifests
      uses: actions/download-artifact@v3
      with:
        name: k8s-manifests-${{ matrix.agent }}
        path: k8s/${{ matrix.agent }}/

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.AZURE_RESOURCE_GROUP_PREFIX }}-production
        cluster-name: ${{ env.CLUSTER_NAME_PREFIX }}-production

    - name: Deploy Canary (10%)
      run: |
        echo "Deploying Canary version (10% traffic) of ${{ matrix.agent }}"
        
        # Create canary deployment with 1 replica (10% of traffic)
        sed 's/name: ${{ matrix.agent }}/name: ${{ matrix.agent }}-canary/g' k8s/${{ matrix.agent }}/deployment.yaml > k8s/${{ matrix.agent }}/deployment-canary.yaml
        sed 's/app: ${{ matrix.agent }}/app: ${{ matrix.agent }}-canary/g' k8s/${{ matrix.agent }}/deployment-canary.yaml -i
        sed 's/replicas: 2/replicas: 1/g' k8s/${{ matrix.agent }}/deployment-canary.yaml -i
        
        kubectl apply -f k8s/${{ matrix.agent }}/deployment-canary.yaml
        kubectl rollout status deployment/${{ matrix.agent }}-canary -n ai-multiagent-lab --timeout=300s

    - name: Monitor Canary metrics
      run: |
        echo "Monitoring Canary metrics for 5 minutes"
        sleep 300
        
        # Check error rates and response times
        ERROR_RATE=$(kubectl logs -l app=${{ matrix.agent }}-canary -n ai-multiagent-lab --tail=100 | grep -c "ERROR" || echo "0")
        echo "Canary error count: $ERROR_RATE"
        
        if [ "$ERROR_RATE" -gt "5" ]; then
          echo "High error rate detected in Canary. Rolling back..."
          kubectl delete deployment ${{ matrix.agent }}-canary -n ai-multiagent-lab
          exit 1
        fi

    - name: Promote Canary to 50%
      run: |
        echo "Promoting Canary to 50% traffic"
        kubectl scale deployment ${{ matrix.agent }}-canary -n ai-multiagent-lab --replicas=5
        kubectl scale deployment ${{ matrix.agent }} -n ai-multiagent-lab --replicas=5

    - name: Monitor 50% Canary
      run: |
        echo "Monitoring 50% Canary for 5 minutes"
        sleep 300

    - name: Full promotion
      run: |
        echo "Promoting Canary to 100% traffic"
        kubectl patch deployment ${{ matrix.agent }} -n ai-multiagent-lab -p '{"spec":{"template":{"spec":{"containers":[{"name":"${{ matrix.agent }}","image":"${{ env.REGISTRY_NAME }}.azurecr.io/${{ matrix.agent }}:${{ github.sha }}"}]}}}}'
        kubectl rollout status deployment/${{ matrix.agent }} -n ai-multiagent-lab --timeout=300s
        kubectl delete deployment ${{ matrix.agent }}-canary -n ai-multiagent-lab

  # Job 7: Post-deployment Testing
  post-deployment-testing:
    name: Post-deployment Testing
    runs-on: ubuntu-latest
    needs: [setup-deployment-matrix, deploy-development, deploy-staging, deploy-production]
    if: always()
    strategy:
      matrix:
        agent: ${{ fromJson(needs.setup-deployment-matrix.outputs.agents) }}
        test-type: [health, integration, load]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.AZURE_RESOURCE_GROUP_PREFIX }}-${{ needs.setup-deployment-matrix.outputs.environment }}
        cluster-name: ${{ env.CLUSTER_NAME_PREFIX }}-${{ needs.setup-deployment-matrix.outputs.environment }}

    - name: Health Tests
      if: matrix.test-type == 'health'
      run: |
        echo "Running health tests for ${{ matrix.agent }}"
        kubectl get pods -n ai-multiagent-lab -l app=${{ matrix.agent }}
        kubectl exec -n ai-multiagent-lab deployment/${{ matrix.agent }} -- curl -f http://localhost:8000/health

    - name: Integration Tests
      if: matrix.test-type == 'integration'
      run: |
        echo "Running integration tests for ${{ matrix.agent }}"
        # Add integration test commands here

    - name: Load Tests
      if: matrix.test-type == 'load'
      run: |
        echo "Running load tests for ${{ matrix.agent }}"
        # Add load test commands here

  # Job 8: Rollback on Failure
  rollback-on-failure:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [setup-deployment-matrix, post-deployment-testing]
    if: failure() && github.event.inputs.rollback_on_failure == 'true'
    strategy:
      matrix:
        agent: ${{ fromJson(needs.setup-deployment-matrix.outputs.agents) }}

    steps:
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.AZURE_RESOURCE_GROUP_PREFIX }}-${{ needs.setup-deployment-matrix.outputs.environment }}
        cluster-name: ${{ env.CLUSTER_NAME_PREFIX }}-${{ needs.setup-deployment-matrix.outputs.environment }}

    - name: Rollback deployment
      run: |
        echo "Rolling back ${{ matrix.agent }} deployment"
        kubectl rollout undo deployment/${{ matrix.agent }} -n ai-multiagent-lab
        kubectl rollout status deployment/${{ matrix.agent }} -n ai-multiagent-lab --timeout=300s

